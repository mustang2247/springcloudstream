
#kafka binder 参数
spring.cloud.stream.kafka.binder.brokers=140.143.193.253:9092
spring.cloud.stream.kafka.binder.zk-nodes=140.143.193.253:2181
spring.cloud.stream.kafka.binder.minPartitionCount=1
spring.cloud.stream.kafka.binder.autoCreateTopics=true
spring.cloud.stream.kafka.binder.autoAddPartitions=true

#通道配置信息
#testa 与sink里的名字保持一致
# 输入imput 消费者有效的和典型的配置
#输入通道的绑定，本例中使用Sink定义输入通道，根据上面所述<channelName>=input
spring.cloud.stream.bindings.input.destination=bitop
spring.cloud.stream.bindings.input.group=bitop-consumer-group
spring.cloud.stream.bindings.input.consumer.concurrency=1
spring.cloud.stream.bindings.input.consumer.partitioned=false
#instanceCount表示应用实例的总数，instanceIndex在多个实例中必须唯一，并介于0~（instanceCount-1）之间。
# 实例的索引可以帮助每个实例确定唯一的接收数据的分区，正确的设置这两个值十分重要，
# 用来确保所有的数据被消费，以及应用实例接收相互排斥不重复消费。
#spring.cloud.stream.instance-index=3
#spring.cloud.stream.instance-count=5
#spring.cloud.stream.bindings.input.destination=wsh-topic-01
#spring.cloud.stream.bindings.input.group=s3
#spring.cloud.stream.bindings.input.consumer.concurrency=1
#spring.cloud.stream.bindings.input.consumer.partitioned=false


#输出通道的绑定，本例中使用Source定义输出通道，根据上面所述<channelName>=output
#在properties配置文件里面添加输出通道配置信息
#输出 生产者有效的和典型的配置
spring.cloud.stream.bindings.output.destination=bitop
spring.cloud.stream.bindings.output.content-type=text/plain
#spring.cloud.stream.bindings.output.producer.partitionKeyExpression=1
spring.cloud.stream.bindings.output.producer.partitionCount=1

#spring.cloud.stream.bindings.output.destination=wsh-topic-01
#spring.cloud.stream.bindings.output.content-type=text/plain
#spring.cloud.stream.bindings.output.producer.partitionCount=1
#spring.cloud.stream.bindings.output.producer.partitionKeyExpression=payload.id

# Test consumer properties
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.group-id=testEmbeddedKafkaApplication
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer

# Binding properties
#spring.cloud.stream.bindings.output.destination=testEmbeddedOut
#spring.cloud.stream.bindings.input.destination=testEmbeddedIn
spring.cloud.stream.bindings.output.producer.headerMode=raw
spring.cloud.stream.bindings.input.consumer.headerMode=raw
#spring.cloud.stream.bindings.input.group=embeddedKafkaApplication